// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(OPERATOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  clients    Client[]
  projects   Project[]
  createdLeads Lead[] @relation("LeadCreator")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Business Models
model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  company   String?
  industry  String?
  website   String?
  address   String?
  notes     String?  @db.Text
  status    ClientStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String
  createdBy User     @relation(fields: [createdById], references: [id])

  projects  Project[]
  campaigns Campaign[]

  @@map("clients")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  status      ProjectStatus @default(PLANNING)
  budget      Decimal? @db.Decimal(10, 2)
  startDate   DateTime?
  endDate     DateTime?
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  managerId   String
  manager     User     @relation(fields: [managerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  campaigns Campaign[]
  n8nWorkflows N8nWorkflow[]

  @@map("projects")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  type        CampaignType
  status      CampaignStatus @default(DRAFT)
  budget      Decimal? @db.Decimal(10, 2)
  startDate   DateTime?
  endDate     DateTime?
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leads Lead[]
  metrics CampaignMetric[]
  reports Report[]

  @@map("campaigns")
}

model Lead {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?
  company     String?
  position    String?
  linkedinUrl String?
  source      LeadSource
  status      LeadStatus @default(NEW)
  score       Int?     @default(0)
  notes       String?  @db.Text
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  createdById String
  createdBy   User     @relation("LeadCreator", fields: [createdById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  activities LeadActivity[]

  @@index([email])
  @@index([status])
  @@index([campaignId])
  @@map("leads")
}

model LeadActivity {
  id        String   @id @default(cuid())
  type      ActivityType
  title     String
  description String? @db.Text
  metadata  Json?
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("lead_activities")
}

model CampaignMetric {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  date        DateTime @default(now())
  leadsGenerated Int   @default(0)
  emailsSent  Int      @default(0)
  emailsOpened Int     @default(0)
  emailsClicked Int    @default(0)
  linkedinConnections Int @default(0)
  whatsappMessages Int @default(0)
  conversions Int      @default(0)
  revenue     Decimal? @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  @@index([campaignId, date])
  @@map("campaign_metrics")
}

model Report {
  id          String   @id @default(cuid())
  title       String
  type        ReportType
  format      ReportFormat @default(PDF)
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  data        Json
  fileUrl     String?
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("reports")
}

model N8nWorkflow {
  id          String   @id @default(cuid())
  workflowId  String   @unique
  name        String
  description String?  @db.Text
  isActive    Boolean  @default(false)
  webhookUrl  String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  lastRunAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  executions N8nExecution[]

  @@map("n8n_workflows")
}

model N8nExecution {
  id          String   @id @default(cuid())
  executionId String   @unique
  workflowId  String
  workflow    N8nWorkflow @relation(fields: [workflowId], references: [workflowId], onDelete: Cascade)
  status      ExecutionStatus
  startedAt   DateTime
  finishedAt  DateTime?
  data        Json?
  error       String?  @db.Text
  createdAt   DateTime @default(now())

  @@index([workflowId, startedAt])
  @@map("n8n_executions")
}

// Enums
enum UserRole {
  ADMIN
  OPERATOR
  CLIENT
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  CHURNED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum CampaignType {
  LEAD_GENERATION
  SEO
  EMAIL_MARKETING
  LINKEDIN_OUTREACH
  WHATSAPP_CAMPAIGN
  MULTI_CHANNEL
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum LeadSource {
  LINKEDIN
  EMAIL
  WHATSAPP
  WEBSITE
  REFERRAL
  MANUAL
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  WON
  LOST
  NURTURING
}

enum ActivityType {
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  LINKEDIN_CONNECTION
  LINKEDIN_MESSAGE
  WHATSAPP_MESSAGE
  CALL_MADE
  MEETING_SCHEDULED
  NOTE_ADDED
  STATUS_CHANGED
}

enum ReportType {
  CAMPAIGN_PERFORMANCE
  LEAD_GENERATION
  MONTHLY_SUMMARY
  CLIENT_OVERVIEW
  ROI_ANALYSIS
}

enum ReportFormat {
  PDF
  EXCEL
  JSON
}

enum ExecutionStatus {
  RUNNING
  SUCCESS
  ERROR
  WAITING
  CANCELLED
}
